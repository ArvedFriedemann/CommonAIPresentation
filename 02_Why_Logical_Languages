Why Logical Languages?

What we often forget in computer science is the initial feeling we had with computers. Weird looking machines that, as soon as black windows opened, we had no idea what they were telling us. Now we take the ability to read a programming language for granted, but let's take a step back and ask ourselves how we could create a language that is actually intuitively readable. For that, we take a look at how computers work to see what are the minimum requirements for a language. Then, we find a way to interact with these machines in an a bit more human language.

Just quick: The language presented here is still a fictional one. If you want to experiment with the concepts shown, I advice to take a look at either Haskell, Oz or PROLOG. I will put links into the description.

Let's look at what we need for a language. The one thing we can't really change about computers is how memory works. A whole lot of boxes that exactly one thing fits in. There are boxes that we put the input in, there are other boxes we get the output out. Some magic inbetween. Of course it's not magic, it's just hidden.
If we ever want anything to end up in our output boxes, we need objects that put it there. We call those assignments.
An assignment copies content from one box into another. The assignment itself is also an object that contains the positions, or pointers, to the boxes it makes equal, so yeah, lets put it into some box of its own as well. As soon as we do so, and one of the target boxes is filled, the other box fills respectively.
Just plane assignments are kinda boring though, as they always assign the same value. Most of the time, we want an assignment to depend on some input. That is why there is a conditional assignment. This is an object that states that if some two assignments are equal, a target box should be equal to a box A, and if not to a box B. Last but not least, we need an object that can find new boxes to store in, but let's end the details here.

All of this is just what we need in order for a computer to do anything. But what does this have to do with nice languages? The reasons are grammars.

Grammars are used to model languages, no matter their level of naturality. In these grammars, we formulate rules like "if Alice can X then X is a verb". This X is a box, also called variable, for any fitting word. Let's say, we want to create a meaningful sentence. As an input, we have a fixed part of the sentence in boxes and an empty box for our X. The grammar is also stored in some boxes. If in our grammar a premise, the part between the "if" and "then", fits without conflict, the posterior, the part after the "then" is now also a sentence on our box X. If somewhere in our grammar we stated that "if X is a verb then X=(do anything)", the sentence is completed to "Alice can do anything". Nice and readable.

With a bit of pondering it is quite straight forward that in a grammar, or natural language, we can express everything we need for our box computers, so they can be used as a programming language. Furthermore, they have the great upside that we do not need to care for order of execution. This is one of the major problems with sequential languages. We always have to keep in mind what's going on first and second and so on. With logical languages, in the best scenario, everything is just happening at the same time, or at least it feels like it would.

Let's define a proper logical language then. The first thing we need is something to bind new variables, or to "find new boxes", because otherwise we would have no variables to start with. With "let A B + - ... in ... end" we can introduce any previously unbound identifier. Admittedly, this is the ugly part. However, as we can use almost any names for the variables that we want, we can shape the language as we like. Next thing we can formulate are equations, like two of our identifiers being equal, to move information. Our example from above would, in the end, look like "let Alice can in let Input in let X in Input = Alice can X end end end". That is a lot of binders, so let's assume that previously unbound variables are automatically bound, but only until we encounter a period. Our example now looks like "Input = Alice can X." If we want to use Alice multiple times without creating a new Alice every time, we'd have to bind the name, so we could write e.g.
"let Alice can Input in
  Input = Alice can X.
  Input = Alice can Y.
  Input = Bob could X.
 end"
Now, the Input and Alice and the can all refer to the same variable, while the X and Y are local. The X from the Alice sentence is a different X than from the Bob sentence.

We have now accumulated a few things that need introduction. First: Why can we write variables next to each other in the equations? Shouldn't an equation just make two variables equal? Yes, and it does. In fact, there is a hidden operator often refered to as "application". If we write two variables next to each other, they represent a new variable that stores a tuple pointing to the two variables. I am not going into technical details here, but this makes something called "terms" possible. They are just super nice to read when dealing with many boxes at the same time, like we would in a sentence. A rule of thumb: Writing variables next to each other makes a list of them. If we want more of a tree structure we can use brackets, like "Alice can (do anything)", you will see in a second how that is useful. Important is: The Equality traverses down these terms. So if we have "A B = C D" this actually means "A = C and C = D". You can imagine why we want to avoid explicitly writing that.

If we write several equations, separated with periods, below each other, we assume them to be conjuncted, meaning they all hold at the same time. As an example, if we have
let Alice can do anything Input in
  Input = Alice can X.
  Input = X Y (do anything).
end
There are now two equalities that hold on the Input variable. Therefore, if we observe the input, we get that "Alice can (do anything)" is in the input variable.

How do we do the conditional equality now with which we actually make the language decide something? Now, we could have an if-then-else operator, but you will see in a second that there is a nicer way. We introduce a disjunction. A disjunction is a choice that the language makes. Let's see first how it would be used before we go into details.
let Alice can reason dance climb Input in
  or Input = Alice can reason.
  [] Input = Alice can dance.
  [] Input = Alice can climb.
  end
end
I am currently borrowing from Oz's syntax, but what we just stated is that the Input has three possibilities. It is impossible for the language to determine which possibility to take, so if the observe the Input, it would be some "Alice can X" because the choices only agree on the initial segment of the sentence. Let's assume out input is not the question what Alice can do, but the question on what she does given a certain atmosphere. This looks like
let Alice can reason dance climb quiet loud rocky Input Output in
  or Input = quiet, Output = Alice can reason.
  [] Input = loud , Output = Alice can dance.
  [] Input = rocky, Output = Alice can climb.
  end
end
The commas as read as an "and". In each disjunction, two equalities have to hold now. It is important to know, that a disjunction does not make any assignments unless it is already clear which path will be taken. This is known as the Andorra principle. But as soon as assignments have been made, that make it clear which way to go, all assignments in that path are put into the memory. This happens when e.g. the Input variable has been fixed before.
If the Input is fix, it is unique which path of the disjunction is taken, so e.g. if the  Input is "quiet", the Output becomes "Alice can reason", like so

let Alice can reason dance climb quiet loud rocky Input Output in
  Input = quiet.
  or Input = quiet, Output = Alice can reason.
  [] Input = loud , Output = Alice can dance.
  [] Input = rocky, Output = Alice can climb.
  end
end

Funnily, this also works in the other direction. If the output is known, the input can be deduced. So if the Output was "Alice can dance", we know the Input must have been "loud", like so.

let Alice can reason dance climb quiet loud rocky Input Output in
  Output = Alice can dance.
  or Input = quiet, Output = Alice can reason.
  [] Input = loud , Output = Alice can dance.
  [] Input = rocky, Output = Alice can climb.
  end
end

That is why logical languages do not really need a concept of input or output. They only have a concept of where there is information missing.

Programming languages can become a lot more human like, with even less special symbols. However, this would require way too much explanation and the implementation would need the universal solver that we are aiming to create. For the scope of this project, the language we just created is perfectly sufficient to give a formal but readable explanation of what we are creating.
