Gathering Meta-Information in Logical Languages

In the last video, we have used disjunctions as our means of case distinction, like in the example where Alice does different things depending on the surrounding.

let Alice can reason dance climb quiet loud rocky Input Output in
  or Input = quiet, Output = Alice can reason.
  [] Input = loud , Output = Alice can dance.
  [] Input = rocky, Output = Alice can climb.
  end
end

However, what happens if we never get to the point that the surrounding or Alices action is ever determined? By what we have stated until now, our program just freezes and that is the end of story, but sometimes, we want a program to autonomously search for possible solutions. An example: if we had the knowledge that the Input were never to be deduced, we could say that in this case, we should choose one that does not cause a conflict. So, in this video, we will create a mechanism to gather information on which variables will be deduced and what else we can achieve along the way. Funnily, it starts with preparing one of the steps needed for the research, namely reasoning about terms, also known as "reflection".

Our language is made up of terms. We write them down, so they technically have to be somewhere, even if we can't see them. Let's model an arbitrary term in our language. To save some let-statements, I will colour the variables that just serve as constants.

or Term empty.
[] Term (var X).
[] Term (bind X in E), Term E.
[] Term (X = Y), Term X, Term Y.
[] Term (X /= Y), Term X, Term Y.
[] Term (X apply Y), Term X, Term Y.
[] Term (X and Y), Term X, Term Y.
[] Term (X or Y), Term X, Term Y.
end

This is a direct translation of our description in the last video. A term can be empty, a variable with an address, a thing binding a variable, an equality or inequality, something binding two terms or conjunction or disjunction.

The problem with this formulation is that it is quite complex. There are a lot of so-called constructors, and many of them behave quite similar. That is why we first abstract a little further. A language term, in a sense, is nothing but a list of symbols or names or tokens, however you want to call them. Sometimes these symbols are grouped. We will see in a second that this just means that terms are just trees with symbols as leafs.

or Term (var X)
[] Term (X appl Y), Term X, Term Y
end

So, the term "(Alice can) (do anything)" would be represented as "Term (( (var Alice) appl (var  can)) appl ( (var do) appl (var anything)) )". Terrible to read, but does the job. If we write "Term X", the X is not evaluated, which it would be if it were on the top level, like "Term X, X". This is in fact why we don't really need to give the application a name and just use the builtin application. The above term would then become "( (var Alice) (var can) ) ( (var do) (var anything) )". In fact, by the same logic, we can drop all names. Our terms now become
or Term X
[] Term (X Y), Term X, Term Y
[] Term (let X in E), Term E
end
Which is, pretty much, the lambda calculus. Executing a term with some Eval X predicate would just look like
Eval X, X.

The problem with this notion however is, that these terms are not evaluated in a safe environment. If an evaluated term causes a conflict, the conflict holds for the entire system, causing yet undefined behaviour. For this, the general negation is needed, so we can state things like
or X, A
[] not X, B
end
such that there is an alternative B in case X fails. This is because technically, the Eval predicate should do more than just evaluating a term. Let Eval T T' be an evaluation function, but where T' is some object that contains all knowledge that is created during the evaluation of T. If T' contains a special symbol BOT, that means that there is a contradiction, then negation "not T" can be expressed as "Eval T T', T' contains BOT". T' furthermore contains all information that eventually lead to that conflict, which can be used for conflict analysis. It is hard to natively express how this Eval T T' predicate gathers this information, as above it is not recursively defined. However, the only information that we ever gather are variable assignments. Remember, in these variables there are the constraints and deductions alike. In the case of a conflict, there are multiple assignments to the same variable. Therefore, T' is essentially a multimemory, where each variable can contain several assignments. This multimemory can be achieved by wrapping every value into a term that represents the set of all possible values.

--TODO: really multimemory? Not just normal memory still containing disjunctions after andorra?


An honourable mention is that terms can be copied. This is, in fact, essential for the disjunction to work. If a variable needs to be "attempted" on two different assignments, these assignments need to be on different variables in order not to cause a conflict. This is achieved by creating a variable for each attempted assignment and copying all constraints that act upon it and giving the copies the new addresses. Needless to say, this becomes a bit memory inefficient when a lot of combinations need to be tested, but we will get to optimizations later.
As this copying is done implicitly in a disjunction, we will only make copying explicit at a later point.
--TODO: Bullshit. No copying needed for disjunction, just assignments.

What is way more interesting is that this reflection feature can be used to derive even further knowledge from the computation. This is especially important for complexity information like runtime and memory used. As in our current model, no value is explicitly deleted and the constraints have constant outdegree due to their term structure, memory usage and runtime are equivalent for now. Therefore, for a term, just the hidden variables created during evaluation need to be counted.

This gets interesting when a term is just "hypothetically" evaluated. In order for optimal solvers to work, disjunctions need to be prepared a little. The idea is, that each disjunction branch has a variable attached declaring the search time in case this branch were executed. So, more formally, in a disjunction with the branches C = or C1 [] ... [] Cn end, there are variables with vars = [t_C1, ... ,t_Cn] such that C' = or (C1, smallest t_C1 vars) [] ...[] (Cn, smalltest t_Cn vars) end. Additionally to C', we add the constraints that Eval (or Ci [] (not Ci), C' without Ci ) T', t_Ci = number of steps T'.
--TODO: This does not force evaluation. If the execution is at a point where it is not known what the result of Ci is, the andorra cannot proceed. There need to be further constraints saying that the whole thing needs to be more or less deterministic!
--TODO2: This needs to be relative to a solver!
--TODO3: Whaddabout branching? ugh...brain's not working right now.
This states that if the correct times for a branch are known, the fastest branch needs to be chosen, or vice versa, the chosen branch needs to have the fastest solving time.










Our aim is to be able to create terms and then run them with minimal overhead. The first step is to create a new term that carries space for the actual variable assignments.

or Assignable empty empty
[] Assignable (bind X in E) (bind X in E'), set content X to C from E to E'.
[] ...
end

or set content X to C from empty to empty.
[] set content X to C from (var X') to (var X' C), X = X'.
[] set content X to C from (var X') to Y, (X \= X').
[] ...
end

This creates terms where the variables get an additional argument (var X C), where C is the actual variable with the actual content, whereas X is just the variables address. So the bind statement creates that new variable, and it is ensured that variables with the same address point to the same space in memory.

Now we would like to define what the evaluation of a term means. To make this a little easier, we have to desugar our original terms. The main reason for desugaring is the application in the equality. As we have seen in the previous episode, X = (Alice can) (do anything) is just a long term for X = (K K'), K = (Alice can) and K' = (do anything), so the content of X just becomes a tuple, and each tuple of variables has exactly one variable with this tuple stored as a constant. After the desugaring, variable equality just stays the fact that the contents of the variables need to be equal. Therefore, the desugaring for tuples looks like

desugar (var X C = X appl Y) (bind K K' in var K A = Xd and var K' B = Yd)), C = A B, desugar X Xd, desugar Y Yd

--TODO: Maybe give the tuple variable back? Otherwise it is created over and over...

This binds the new variables in the reflected terms and makes sure that the real content of the original variable becomes the tuple needed.

Next up, there are many connectors for terms, like and and or or equality. This could, as well, just be expressed via tuples and would create less case distinctions for the equality. So let's do that.
--TODO


We can now define what the evaluation of a term means. It is just the translation of our terms into the concepts we have in the language.

Eval X, Assignable X' X.
or Eval empty
[] Eval (var X C)
[] Eval (bind X in E), Eval E
[] Eval (var X Cx = var Y Cy), Cx = Cy
[] Eval (var X Cx = A appl B), Cx = C1 C2, Eval (var X1 C1 = A), Eval (var X2 C2 = B)
[] ...now the commutative cases
[] Eval (A appl B), Eval A, Eval B --TODO
[] Eval (A and B), Eval A, Eval B
[] Eval (A or B), Eval A
[] Eval (A or B), Eval B
end

There are several things to be observed here. first, there is a case distinction for equality on variables. This is because in the case of the application, the equality is not on the hidden variable.
--TODO Maybe just resolve the hidden variables first?


---------------------------------------
--Big TODO: The details of this reflection are super cumbersome. This needs heavy cleaning. I am going to continue writing to finally get to the payoff of of reflection, but this needs to be heavily worked on.
Maybe introduce some quoting operator? Just try out if it helps. Next up, maybe just every variable needs an operator to get back to its original address? Its implementation or something?
----------------------------------------


With this reflection we can now do two amazing things. We will not go into detail to the first one, but it is worth mentioning. With reflection, we can use terms of our language as templates for more sophisticated terms! Imagine e.g. wanting a compiler where you can just sketch code, and your errors are automatically removed. Your initial code would go as an input and initial guess for the search towards the correct program, without needing to be correct code. Or if you want to add a feature like logging or something into your code without changing it explicitly. Now...all possible.

But yeah, the second and at least here more important upside of reflection is that we can gather runtime data for our terms. We can measure the term size, or the number of assignments or data transfer. This isn't even too much overhead. As the final assignments for variables are actually being deduced, if a terms construction depends on them, they can just be queried from the real evaluation. Whatever measurement we are using, there is a predicate "measureTime Term Time" that gives us the runtime of a term. if we have two terms we could evaluate, say, in a disjunction, we could choose the one with the lowest runtime. If however determining which runtime is fastest is slower than choosing, the branch is chosen at random.
